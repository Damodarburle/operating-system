5. Write a program to compute the average waiting time and turnaround time based on Preemptive shortest remaining processing time first (SRPT) algorithm for the following set of processes, with the arrival times and the CPU-burst times given in milliseconds
Process   Arrival Time Burst Time
P1		0		 5
P2		1		   3
P3		2		   3
P4		4		   1

sol:
#include <stdio.h>

struct Process {
    int id;
    int arrival_time;
    int burst_time;
    int remaining_time;
    int waiting_time;
    int turnaround_time;
};

int main() {
    // Initialize the processes
    struct Process processes[] = {
        {1, 0, 5, 5, 0, 0},
        {2, 1, 3, 3, 0, 0},
        {3, 2, 3, 3, 0, 0},
        {4, 4, 1, 1, 0, 0}
    };
    int num_processes = sizeof(processes) / sizeof(struct Process);

    // Sort the processes by arrival time
    for (int i = 0; i < num_processes - 1; i++) {
        for (int j = i + 1; j < num_processes; j++) {
            if (processes[i].arrival_time > processes[j].arrival_time) {
                struct Process temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }

    int current_time = 0;
    int completed_processes = 0;
    int current_process = -1;

    while (completed_processes < num_processes) {
        int shortest_time = 100000;
        int shortest_index = -1;

        // Find the process with the shortest remaining time
        for (int i = 0; i < num_processes; i++) {
            if (processes[i].arrival_time <= current_time && processes[i].remaining_time > 0 && processes[i].remaining_time < shortest_time) {
                shortest_time = processes[i].remaining_time;
                shortest_index = i;
            }
        }

        if (shortest_index == -1) {
            current_time++;
            continue;
        }

        // Update the waiting time for all the processes
        for (int i = 0; i < num_processes; i++) {
            if (i != shortest_index && processes[i].arrival_time <= current_time && processes[i].remaining_time > 0) {
                processes[i].waiting_time++;
            }
        }

        // Execute the current process for one time unit
        processes[shortest_index].remaining_time--;
        current_time++;

        // Check if the current process is completed
        if (processes[shortest_index].remaining_time == 0) {
            processes[shortest_index].turnaround_time = current_time - processes[shortest_index].arrival_time;
            completed_processes++;
        }
    }

    // Calculate the average waiting time and turnaround time
    float avg_waiting_time = 0;
    float avg_turnaround_time = 0;

    for (int i = 0; i < num_processes; i++) {
        avg_waiting_time += processes[i].waiting_time;
        avg_turnaround_time += processes[i].turnaround_time;
    }

    avg_waiting_time /= num_processes;
    avg_turnaround_time /= num_processes;

    printf("Average waiting time: %0.2f ms\n", avg_waiting_time);
    printf("Average turnaround time: %0.2f ms\n", avg_turnaround_time);

    return 0;
}






output:
Average waiting time: 1.75 ms
Average turnaround time: 5.00 ms



